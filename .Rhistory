token<-"CAACEdEose0cBAL77LZCLAXZAFmYPbSwIikq9f7yRPnejqiz4bOt9m4ZAPkn05ZCZCTOk3lb6aGTQlQnFltSWFwIoB0ZC1inVC0ZAJPeZCj6zL0lDhgCrMYX8IO5imx14J22uZBzfwFTYhS81umomvy043NSs1DVHGGLh8OZC0kAYly85QQUQceR4pj46WTvueMrKWZCMSDRm4TXdWmwxPNJcPpiI07I10zh2CbMGxnCv4oZAsQZDZD"
library(Rfacebook)
me
me<-getUser("me",token=token)
me<-getUsers("me",token=token)
me
my_friends_info
my_friends_info<-getUsers(my_friends$id,token = token,private_info = TRUE)
my_friends<-getFriends(token,simplify = TRUE)
my_friends_info<-getUsers(my_friends$id,token = token,private_info = TRUE)
table(my_friends_info$name)
table(my_friends_info$locale)
table(my_friends_info$birthday)
table(my_friends_info$relationship_status)
shiny::runApp('Desktop/DataProduct/Proj-3')
setwd("~/Desktop/DataProduct/Proj-3")
library(shiny)
library(maps)
library(mapproj)
source("helpers.R",keep.source = TRUE, encoding = checkEncoding(helpers.R))
counties <- readRDS("~/Desktop/DataProduct/Proj-3/data/counties.rds")
shinyServer(
function(input, output) {
output$map <- renderPlot({
data <- switch(input$var,
"Percent White" = counties$white,
"Percent Black" = counties$black,
"Percent Hispanic" = counties$hispanic,
"Percent Asian" = counties$asian)
color <- switch(input$var,
"Percent White" = "darkgreen",
"Percent Black" = "black",
"Percent Hispanic" = "darkorange",
"Percent Asian" = "darkviolet")
legend <- switch(input$var,
"Percent White" = "% White",
"Percent Black" = "% Black",
"Percent Hispanic" = "% Hispanic",
"Percent Asian" = "% Asian")
percent_map(var = data,
color = color,
legend.title = legend,
max = input$range[2],
min = input$range[1])
})
}
)
setwd("~/Desktop/DataProduct/Proj-3")
library(shiny)
library(maps)
library(mapproj)
source("helpers.R",keep.source = TRUE)
counties <- readRDS("~/Desktop/DataProduct/Proj-3/data/counties.rds")
shinyServer(
function(input, output) {
output$map <- renderPlot({
data <- switch(input$var,
"Percent White" = counties$white,
"Percent Black" = counties$black,
"Percent Hispanic" = counties$hispanic,
"Percent Asian" = counties$asian)
color <- switch(input$var,
"Percent White" = "darkgreen",
"Percent Black" = "black",
"Percent Hispanic" = "darkorange",
"Percent Asian" = "darkviolet")
legend <- switch(input$var,
"Percent White" = "% White",
"Percent Black" = "% Black",
"Percent Hispanic" = "% Hispanic",
"Percent Asian" = "% Asian")
percent_map(var = data,
color = color,
legend.title = legend,
max = input$range[2],
min = input$range[1])
})
}
)
install.packages(c("maps", "mapproj"))
setwd("~/Desktop/DataProduct/Proj-3")
library(shiny)
library(maps)
library(mapproj)
source("helpers.R",keep.source = TRUE)
counties <- readRDS("~/Desktop/DataProduct/Proj-3/data/counties.rds")
shinyServer(
function(input, output) {
output$map <- renderPlot({
data <- switch(input$var,
"Percent White" = counties$white,
"Percent Black" = counties$black,
"Percent Hispanic" = counties$hispanic,
"Percent Asian" = counties$asian)
color <- switch(input$var,
"Percent White" = "darkgreen",
"Percent Black" = "black",
"Percent Hispanic" = "darkorange",
"Percent Asian" = "darkviolet")
legend <- switch(input$var,
"Percent White" = "% White",
"Percent Black" = "% Black",
"Percent Hispanic" = "% Hispanic",
"Percent Asian" = "% Asian")
percent_map(var = data,
color = color,
legend.title = legend,
max = input$range[2],
min = input$range[1])
})
}
)
install.packages(c("maps", "mapproj"))
setwd("~/Desktop/DataProduct/Proj-3")
library(shiny)
library(maps)
library(mapproj)
source("helpers.R",keep.source = TRUE)
counties <- readRDS("~/Desktop/DataProduct/Proj-3/data/counties.rds")
shinyServer(
function(input, output) {
output$map <- renderPlot({
data <- switch(input$var,
"Percent White" = counties$white,
"Percent Black" = counties$black,
"Percent Hispanic" = counties$hispanic,
"Percent Asian" = counties$asian)
color <- switch(input$var,
"Percent White" = "darkgreen",
"Percent Black" = "black",
"Percent Hispanic" = "darkorange",
"Percent Asian" = "darkviolet")
legend <- switch(input$var,
"Percent White" = "% White",
"Percent Black" = "% Black",
"Percent Hispanic" = "% Hispanic",
"Percent Asian" = "% Asian")
percent_map(var = data,
color = color,
legend.title = legend,
max = input$range[2],
min = input$range[1])
})
}
)
install.packages(c("maps", "mapproj"))
source("helpers.R",keep.source = TRUE)
counties <- readRDS("~/Desktop/DataProduct/Proj-3/data/counties.rds")
shinyServer(
function(input, output) {
output$map <- renderPlot({
data <- switch(input$var,
"Percent White" = counties$white,
"Percent Black" = counties$black,
"Percent Hispanic" = counties$hispanic,
"Percent Asian" = counties$asian)
color <- switch(input$var,
"Percent White" = "darkgreen",
"Percent Black" = "black",
"Percent Hispanic" = "darkorange",
"Percent Asian" = "darkviolet")
legend <- switch(input$var,
"Percent White" = "% White",
"Percent Black" = "% Black",
"Percent Hispanic" = "% Hispanic",
"Percent Asian" = "% Asian")
percent_map(var = data,
color = color,
legend.title = legend,
max = input$range[2],
min = input$range[1])
})
}
)
install.packages(c("maps", "mapproj"))
setwd("~/Desktop/DataProduct/Proj-3")
library(shiny)
#library(maps)
#library(mapproj)
source("helpers.R",keep.source = TRUE)
counties <- readRDS("~/Desktop/DataProduct/Proj-3/data/counties.rds")
shinyServer(
function(input, output) {
output$map <- renderPlot({
data <- switch(input$var,
"Percent White" = counties$white,
"Percent Black" = counties$black,
"Percent Hispanic" = counties$hispanic,
"Percent Asian" = counties$asian)
color <- switch(input$var,
"Percent White" = "darkgreen",
"Percent Black" = "black",
"Percent Hispanic" = "darkorange",
"Percent Asian" = "darkviolet")
legend <- switch(input$var,
"Percent White" = "% White",
"Percent Black" = "% Black",
"Percent Hispanic" = "% Hispanic",
"Percent Asian" = "% Asian")
percent_map(var = data,
color = color,
legend.title = legend,
max = input$range[2],
min = input$range[1])
})
}
)
install.packages(c("maps", "mapproj"))
# Note: percent map is designed to work with the counties data set
# It may not work correctly with other data sets if their row order does
# not exactly match the order in which the maps package plots counties
install.packages(c("maps", "mapproj"))
percent_map <- function(var, color, legend.title, min = 0, max = 100) {
# generate vector of fill colors for map
shades <- colorRampPalette(c("white", color))(100)
# constrain gradient to percents that occur between min and max
var <- pmax(var, min)
var <- pmin(var, max)
percents <- as.integer(cut(var, 100,
include.lowest = TRUE, ordered = TRUE))
fills <- shades[percents]
# plot choropleth map
map("county", fill = TRUE, col = fills,
resolution = 0, lty = 0, projection = "polyconic",
myborder = 0, mar = c(0,0,0,0))
# overlay state borders
map("state", col = "white", fill = FALSE, add = TRUE,
lty = 1, lwd = 1, projection = "polyconic",
myborder = 0, mar = c(0,0,0,0))
# add a legend
inc <- (max - min) / 4
legend.text <- c(paste0(min, " % or less"),
paste0(min + inc, " %"),
paste0(min + 2 * inc, " %"),
paste0(min + 3 * inc, " %"),
paste0(max, " % or more"))
legend("bottomleft",
legend = legend.text,
fill = shades[c(1, 25, 50, 75, 100)],
title = legend.title)
}
install.packages(c("maps", "mapproj"))
runApp()
keep.source=TRUE
shinyUI(fluidPage(
titlePanel("US Census Analysis"),
sidebarLayout(
sidebarPanel(
helpText("Create Demographic Maps with 2010 Census data"),
br(),
br(),
br(),
br(),
selectInput("var",
label = "Choose An Ethinic Group to Display",
choices=list("Percent White","Percent Black","Percent Hispanic","Percent Asian"),
selected="Percent White"),
br(),
br(),
br(),
br(),
sliderInput("range",
label = "Range of Interest:",
min=0,max=100,value=c(0,100)),
br(),
br(),
br(),
br(),
img(src = "raman.png", height = 72, width = 72),
"Creator of this Product "
),
mainPanel((plotOutput("map"))
)
))
keep.source=TRUE
shinyUI(fluidPage(
titlePanel("US Census Analysis"),
sidebarLayout(
sidebarPanel(
helpText("Create Demographic Maps with 2010 Census data"),
br(),
br(),
br(),
br(),
selectInput("var",
label = "Choose An Ethinic Group to Display",
choices=list("Percent White","Percent Black","Percent Hispanic","Percent Asian"),
selected="Percent White"),
br(),
br(),
br(),
br(),
sliderInput("range",
label = "Range of Interest:",
min=0,max=100,value=c(0,100)),
br(),
br(),
br(),
br(),
img(src = "raman.png", height = 72, width = 72),
"Creator of this Product "
),
mainPanel((plotOutput("map"))
)
))
paste0(min + 3 * inc, " %"),
paste0(max, " % or more"))
shiny::runApp()
setwd("~/Desktop/DataProduct/Coursera-Shiny")
runApp()
installed.packages()
runApp()
install.packages("rChats")
runApp()
library(rcharts)
library(rCharts)
install.packages("rCharts")
setwd("~/Desktop/DataProduct/Proj-3")
runApp()
percent_map(counties$white, "darkgreen", "% white")
percent_map(counties$hispanic, "darkgreen", "% hispanic")
percent_map(counties$hispanic, "yellow", "% hispanic")
percent_map(counties$hispanic, "darkgreen", "% hispanic")
shiny::runApp()
shiny::runApp()
percent_map(counties$hispanic, "darkgreen", "% hispanic")
percent_map(counties$hispanic, "orange", "% hispanic")
shiny::runApp()
shiny::runApp()
shinyUI(fluidPage(
titlePanel("US Census Analysis"),
sidebarLayout(
sidebarPanel(
helpText("Create Demographic Maps with 2010 Census data"),
br(),
br(),
br(),
br(),
selectInput("var",
label = "Choose An Ethinic Group to Display",
choices=list("Percent White","Percent Black","Percent Hispanic","Percent Asian"),
selected="Percent White"),
br(),
br(),
br(),
br(),
sliderInput("range",
label = "Range of Interest:",
min=0,max=100,value=c(0,100)),
br(),
br(),
br(),
br(),
img(src = "raman.png", height = 72, width = 72),
"Creator of this Product "
),
)
))
shinyUI(fluidPage(
titlePanel("US Census Analysis"),
sidebarLayout(
sidebarPanel(
helpText("Create Demographic Maps with 2010 Census data"),
br(),
br(),
br(),
br(),
selectInput("var",
label = "Choose An Ethinic Group to Display",
choices=list("Percent White","Percent Black","Percent Hispanic","Percent Asian"),
selected="Percent White"),
br(),
br(),
br(),
br(),
sliderInput("range",
label = "Range of Interest:",
min=0,max=100,value=c(0,100)),
br(),
br(),
br(),
br(),
img(src = "raman.png", height = 72, width = 72),
"Creator of this Product "
),
mainPanel((plotOutput("map"))
)
))
shinyUI(fluidPage(
titlePanel("US Census Analysis"),
sidebarLayout(
sidebarPanel(
helpText("Create Demographic Maps with 2010 Census data"),
br(),
br(),
br(),
br(),
selectInput("var",
label = "Choose An Ethinic Group to Display",
choices=list("Percent White","Percent Black","Percent Hispanic","Percent Asian"),
selected="Percent White"),
br(),
br(),
br(),
br(),
sliderInput("range",
label = "Range of Interest:",
min=0,max=100,value=c(0,100)),
br(),
br(),
br(),
br(),
img(src = "raman.png", height = 72, width = 72),
"Creator of this Product "
),
mainPanel()
)
))
# Note: percent map is designed to work with the counties data set
# It may not work correctly with other data sets if their row order does
# not exactly match the order in which the maps package plots counties
install.packages(c("maps", "mapproj"))
percent_map <- function(var, color, legend.title, min = 0, max = 100) {
# generate vector of fill colors for map
shades <- colorRampPalette(c("white", color))(100)
# constrain gradient to percents that occur between min and max
var <- pmax(var, min)
var <- pmin(var, max)
percents <- as.integer(cut(var, 100,
include.lowest = TRUE, ordered = TRUE))
fills <- shades[percents]
# plot choropleth map
map("county", fill = TRUE, col = fills,
resolution = 0, lty = 0, projection = "polyconic",
myborder = 0, mar = c(0,0,0,0))
# overlay state borders
map("state", col = "white", fill = FALSE, add = TRUE,
lty = 1, lwd = 1, projection = "polyconic",
myborder = 0, mar = c(0,0,0,0))
# add a legend
inc <- (max - min) / 4
legend.text <- c(paste0(min, " % or less"),
paste0(min + inc, " %"),
paste0(min + 2 * inc, " %"),
paste0(min + 3 * inc, " %"),
paste0(max, " % or more"))
legend("bottomleft",
legend = legend.text,
fill = shades[c(1, 25, 50, 75, 100)],
title = legend.title)
}
install.packages(c("maps", "mapproj"))
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
install.packages(c("maps", "mapproj"))
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
install.packages(c("maps", "mapproj"))
shiny::runApp()
shiny::runApp()
install.packages(c("maps", "mapproj"))
install.packages(c("maps", "mapproj"))
shiny::runApp()
install.packages(c("maps", "mapproj"))
install.packages(c("maps", "mapproj"))
install.packages(c("maps", "mapproj"))
install.packages(c("maps", "mapproj"))
shiny::runApp()
install.packages(c("maps", "mapproj"))
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
library(shinyapps)
diployApp()
library(devtools)
diployApp()
library(shinyapps)
diployApp()
deployApp()
deployApp()
deployApp()
deployApp()
deployApp()
deployApp()
deployApp()
shiny::runApp()
